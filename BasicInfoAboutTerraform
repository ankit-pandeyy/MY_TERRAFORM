
Aws launched CloudFormation as a automation tool for aws in 2011.

Mithchell Hashimoto has created Terrafrom in July 2014

HashiCorp Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources in human-readable configuration files that you can version, reuse, and share. You can then use a consistent workflow to provision and manage all of your infrastructure throughout its lifecycle. Terraform can manage low-level components like compute, storage, and networking resources, as well as high-level components like DNS entries and SaaS features.

In the starting of Terraform it only supports for 2 clouds i.e Aws and Digital ocean.
Terrafrom name scienctific called as makes your plannet just like a earth

Key Points:

1: Terraform was first introduced in July 2014 which supports Aws  and digital ocean at that time.
2: Invented by Mithchell Hashimoto
3: Written in Go language.
4: Terrafrom uses Hasicorp configure language,it is similar to Json,but easy and human readable.
key=value

IAC:

Infrastructure as a code is  the managing and provisioning of infra through code instead of through manual process.
There are 2 ways to approach IAC

1: Imperative(cloud formation)
2: Declarative(Terrafrom)

Imperative:
This approach defines the specific command needed to achieve the deisired configuration,and those commands then need to execute in the correct order.

Declarative:
This approach defines the disired state of the system ,including what resources you need and any properties they should have and an IAC tool will configure it for you.

Benifits of Terrafrom:

1: Supports almost all cloud procviders and can manage infra on all clouds.
2: Terraform has a simple language known as Hcl.
3: East to integrate with configuration management tools
4: It is easily extensible with plugin
5: It is free.
6: Terraform keep tracks of your real infra in a state file 
7: Reuse code.

Terraform commands:

Providers:

A providers is responsilbe for understanding Api interactions and exposing resources . If an api is available,you can create a provider.A provider uses plugins .In order to make a procvider available on Terraform ,we need to make a terrafrom init,this command download any plugin we need for our providers

Commands:

terraform init
This command is used to intialise a working directory containing tf configuration files.It is safe to run this command multiple times .This command will never delete your exiting configuration or state during init ,root configration directory is consulted for backend configration and the chosen backend is initialised using the given confguration.

terraform validate
This command validate the configration file in a directory ,referring only to the configuration and not accessing any remote services such as remote state ,providers Api's etc.
Validate runs checks that wheather a configuration is syntactically valid and internally consistent,regardless od any providers vauriable or exiting state.
It is thus useful in general validation of reusable modules including correntness of attribute names and valuse type.

terrafrom plan
This command is used to create an execution plan.Tf perform a refresh,unless explicity disabled and then determines what actions are necessary to achieve the disred state specificied in the configration files.

terraform apply

This command is used to apply the changes required to reach the desired state of the confiuguration or the pre determined set of action generated by a tf plan exection plan.

terraform destroy:

This will terminate/delete all componnents created by tf code.


TF CODE:

1: Blocks:

blocks are group of expressions,argument and other blocks into lableable structure,which external block can then refrence.IT curly bracket syntax is shared by most object orient language

2: Arguments:

3: Expression:

Variables types in Terraform:

1: String type

variable "string_type" {
 description = "This is a variable of type string"
 type        = string
 default     = "Default string value for this variable"
}

variable "string_heredoc_type" {
 description = "This is a variable of type string"
 type        = string
 default     = <<EOF
hello, this is Sumeet.
Do visit my website!
EOF
}

2: Number type

variable "number_type" {
 description = "This is a variable of type number"
 type        = number
 default     = 42
}

3: Boolean type:

variable "boolean_type" {
 description = "This is a variable of type bool"
 type        = bool
 default     = true
}

4: Map type

variable "map_type" {
 description = "This is a variable of type map"
 type        = map(string)
 default     = {
   key1 = "value1"
   key2 = "value2"
 }
}

5: Object type

variable "object_type" {
 description = "This is a variable of type object"
 type        = object({
   name    = string
   age     = number
   enabled = bool
 })
 default = {
   name    = "John Doe"
   age     = 30
   enabled = true
 }
}
